/* I am kokastar
                                     .!!!(*(("""((!!!!!!!!!'`          ```..```
`..`````                         `!""!!!.```    ``.'!!!'!!!!"I!'                ````````
           `````                !(! ``                        !!""*!-
                  `.````                                          `!(3*`
              `  ` .("!!!*"' ````````                                 !(""!-
               ` '""'````           `..``````                            `'(%!  `
             ` `"". ` `                       ``.```````                  `` !%! ``
              '$!`                                   ```````````          `    !3!  `
           ` (3`            '"(`         ``  .!`               `` ```  .`        (3.
          ` u"             `$!          `#I !"$!.$$j!                      ````  `'$' `
```````` .$!              !$          .$$#j"``("! !$.          `                 `'#.``..
         !$! .`..`       !!"!         .t!``       ` "I                 !.           "j
    ` ` ""`       ```..`"$'%!         "!            '%` ` ""%'         !$'          !#`
 ` ```!&!      `   `   (+  (3```..`` *!             `$.  .%`""          !3         ` $(
    `"+` ``!!`        '$"(""#! `   `!"``..````      .$` `I! !$          '#         ` "%
   !"'!!""3#!    `   `$"!!!'(#!    .u.        ````.`!$``j!  '$+*""*!! ` !%           !#`
`!$%""!' `$!      ` `"$!!!!!*(""`  !" `           ` (".u! ` !#%"""I"#&  $!            #!
'!!`  `  !$        ` I! ``     !u(-$!``            .3"I'    I*'... .!! ($.            $!
         !$     `   !z` `!!(!!`  '(#'```         ` (#(.   !###$$$$#z!.!j!% ` ``.``` ` %*
```````` `$!     !- 3!!%$%j"$##t   `              ` `     "#!(#'!!!!u#$ '$.         ``%+``
       ```!#'```!#"'$#!   '#%3*$'  `                      !!`##$"!"I"+I`'$`   `       $!
           !$- !$'3$#!`.. $(%!%!#'`   `                   ` .#%#$#3J$-  '$  !+       '$`
            !$!#!`'##`   !$%*$'I#( ```       `   `` `       .$$###$($'  ("  "!      `%!
            `-%!  .#!    .##%#"%#( ` '"`!""""u( *#$.        `#%!!!!%u   J! !$"(z! ` !3
                   $!('   "#!` '#.   "%$.!"++*(*!$#( ` .     !%!.`!$. -!$`'""###!  !#!
                  `%"#! `  !$("$!   !%!#.        *%"j-.  `` .`.!""!`.!##!'%.  `"I.!""
                   j"!$3!!.` ..`'!"#$*('  '' `    !u"$$"!!!!!'''!(3#$#(&!%.`` `"" !!  `
                   $+  `!!"%$$$%"(!` `    !!`    `` `!!!(!((((!(!!!!. +#( `` !3!`'``` `
`````              #!  `                                         ` ``.z!  .("!        ````
      `.```````` ` $z .`!!'  `                                    -"""""!.'- `
                `` .$3!$$*!$'                                     !I"""!!$! ` ``
                     !##!(I!. .`````         `-!!!!                     "$u! `
                      `!!"u*!`       ``.``.#"(!!!!%"     `       .``!!""#(`
                         ` '!"""!` `  ` ` `*%!!.` %+``  ``'!!"""""-`!` !z
                               `!IJ"(!`     `'- .!!!(""""3$!!` ``...` .$.
                                    -!"jI"*(I"3"+!!-`   !$'`!"*+""!!((3u```
                                   . `  $(```          .$..` ``   `          .-``````
`````                          .!!! .! !#` ` `       ` '$.!"""!!`                     ````
   ``````````               !""!!'' !#($$"!!!'`    .'!(%%'    .!*"!. `
              ```````.. ` `!$`     `j#!   .!!!!++j33ju"$'`  `    'I#!
                        ````!3.````'$.(t!!` `.!!"""!!!$! ` `'!!""!!`
                             .I!`  I(``.'!(((!!.    `3!   !3!'`
                               !u!!$`   `    `````` (" ` .$'
                                 !#%                $!  `'#!``` `
                                  ..                .!"(+"!`    ````.```` `

 */
#include <bits/stdc++.h>
#include <atcoder/all>
#include <fstream>
using namespace std;
using namespace atcoder;
using ll = long long;
using intp = pair<int,int>;
using uset = unordered_set<int>;
using umap = unordered_map<int,int>;
using vi = vector<int>;
using vii = vector<vector<int>>;
using vc = vector<char>;
using vcc = vector<vector<char>>;
using vb = vector<bool>;
using vbb = vector<vector<bool>>;
using minp_queue = priority_queue<intp, vector<intp>, greater<intp>>;
using min_queue = priority_queue<int, vector<int>, greater<int>>;
#define rep(i,a,b) for(int i=a;i<b;i++)
#define rrep(i,a,b) for(int i=a;i>=b;i--)
#define brep(i,a,b) for(int i=a;i<(1<<b);i++)
#define fore(i,a) for(auto &i:a)
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define outset(x) cout << setprecision(x)
#define F first
#define S second
#define nl "\n"
#define makep make_pair
const int INF = 1<<30;
template <typename T>
bool chmax(T &a,const T& b){if(a<b){a=b;return true;}return false;}
template <typename T>
bool chmin(T &a,const T& b){if(a>b){a=b;return true;}return false;}
struct range_set {
private:
    std::set<std::pair<int, int>> s;

public:
    range_set() {
        s.emplace(INT_MIN, INT_MIN);
        s.emplace(INT_MAX, INT_MAX);
    }

    bool contains(int x) const {
        auto it = std::prev(s.lower_bound(std::make_pair(x+1, x+1)));
        auto [l, u] = *it;
        return l <= x && x <= u;
    }

    bool insert(int x) {
        auto nit = s.lower_bound(std::make_pair(x+1, x+1));
        auto it = std::prev(nit);
        auto [l, u] = *it;
        auto [nL, nu] = *nit;
        if (l <= x && x <= u) return false;
        if (u == x-1) {
            if (nL == x+1) {
                s.erase(it);
                s.erase(nit);
                s.emplace(l, nu);
            } else {
                s.erase(it);
                s.emplace(l, x);
            }
        } else {
            if (nL == x+1) {
                s.erase(nit);
                s.emplace(x, nu);
            } else {
                s.emplace(x, x);
            }
        }
        return true;
    }

    bool erase(int x) {
        auto nit = s.lower_bound(std::make_pair(x+1, x+1));
        nit = std::prev(nit);
        auto [l, u] = *nit;
        s.erase(nit);
        if(l==u){
            ;
        }else if (l == x) {
            s.emplace(l+1, u);
        } else if (u == x) {
            s.emplace(l, u-1);
        } else{
            s.emplace(l,x-1);
            s.emplace(x+1,u);
        }
        return true;
    }

    int mex(int x = 0) const {
        auto [l, u] = *std::prev(s.lower_bound(std::make_pair(x+1, x+1)));
        if (l <= x && x <= u) {
            return u+1;
        } else {
            return x;
        }
    }
};
class hashStr {
private:
    long long mod = 2147483647;
    string s="";
    vector<long long> t;
    vector<long long> H;
    vector<long long> power100;
public:
    string str() {
        return s;
    }
    void set(string st) {
        s = st;
        if(s.size() > power100.size()) {
            long long i=power100.size();
            if(power100.empty()) {
                power100.emplace_back(1);
                i = 1;
            }
            for(;i<=s.size();i++) {
                power100.push_back(power100[i-1] * 100LL % mod);
            }
        }
        t.clear();
        t.emplace_back(0);
        for(long long i=1;i<=s.size();i++) {
            t.emplace_back(s[i-1] - ' ' + 1);
        }
        H.clear();
        H.emplace_back(0);
        for(long long i=1;i<=s.size();i++) {
            H.emplace_back((100LL * H[i-1] + t[i]) % mod);
        }
    }
    void modSet(long long n) {
        mod = n;
        H.clear();
        power100.clear();
        set(s);
    }
    long long hash(long long l, long long r) {
        l++;r++;
        long long val = H[r] - (H[l-1] * power100[r-l+1] % mod);
        if(val<0)val+=mod;
        return val;
    }
};
void setup(){
#ifdef LOCAL
    ifstream inputFile("input.txt");
		cin.rdbuf(inputFile.rdbuf());
#else
    cin.tie(0); ios::sync_with_stdio(0);
#endif
    cout<<fixed<<setprecision(10);
}
#ifdef LOCAL
#  include "debug_print.hpp"
#  define debug(...) debug_print::multi_print(#__VA_ARGS__, __VA_ARGS__)
#else
#  define debug(...) (static_cast<void>(0))
#endif

#pragma GCC target("avx2")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
//#pragma GCC target("arch=skylake-avx512")

//10^9は2^30を超えないよ

//int op(int a,int b){return a+b;}
//int e(){return 0;} //op(a,e)=aが成り立つ


int main() {
    setup();
    /*
    vector<bool> num(500001,true);
    vi prime,likeNum;
    num[0] = false;
    num[1] = false;
    num[2] = true;
    rep(i,0,num.size()){
        if(!num[i])continue;
        for(int j=i+i;j<=500000;j+=i)num[j] = false;
    }
    prime.emplace_back(2);
    rep(i,0,num.size()){
        if(num[i] && i!=2){
            prime.emplace_back(i);
            fore(v,prime){
                if((i+1)/2 == v)likeNum.emplace_back(i);
            }
        }
    }

    cout << likeNum.size() << nl;
    cout << "{";
    fore(v,likeNum){
        cout << v << ",";
    }*/

    vi likeNum = {3,5,13,37,61,73,157,193,277,313,397,421,457,541,613,661,673,733,757,877,997,1093,1153,1201,1213,1237,1321,1381,1453,1621,1657,1753,1873,1933,1993,2017,2137,2341,2473,2557,2593,2797,2857,2917,3061,3217,3253,3313,3517,3733,4021,4057,4177,4261,4273,4357,4441,4561,4621,4933,5077,5101,5113,5233,5413,5437,5581,5701,6037,6073,6121,6133,6217,6337,6361,6373,6637,6661,6781,6997,7057,7213,7393,7417,7477,7537,7753,7933,8053,8101,8221,8317,8353,8461,8521,8677,8713,8893,9013,9133,9181,9241,9277,9601,9661,9721,9817,9901,9973,10333,10357,10453,10837,10861,10957,11113,11161,11317,11497,11677,11701,12073,12157,12241,12301,12421,12433,12457,12541,12553,12601,12721,12757,12841,12853,13093,13381,13417,13681,13921,13933,14437,14593,14737,14821,15013,15073,15121,15241,15277,15361,15373,15733,15901,16033,16333,16381,16417,16573,16633,16657,16921,17041,17053,17077,17257,17293,17377,17881,18013,18097,18133,18181,18217,18253,18301,18313,18397,18481,18553,18637,18793,19237,19441,19477,19717,19801,19813,19861,20353,20533,20641,20857,21001,21061,21193,21277,21313,21577,21661,21673,21817,22093,22501,22573,22621,22993,23053,23173,23557,23677,23773,23917,24097,24421,24481,24781,24841,25033,25153,25237,25561,25657,25933,26017,26293,26317,26437,26497,26821,26833,26881,26953,27073,27253,27337,27361,27457,27997,28057,28297,28393,28813,28837,28921,29101,29473,29641,30181,30241,30517,30553,30577,30637,30661,30697,30781,30853,31081,31237,31321,31333,31357,31477,31573,31873,31981,32173,32377,32497,32533,32833,33037,33301,33457,33493,33757,33961,34057,34213,34273,34381,34513,34897,34981,35317,35521,35677,35977,36097,36241,36433,36457,36793,36877,36901,36913,37273,37321,37357,37573,37717,37957,38281,38461,38833,38953,38977,39217,39373,39397,39733,40093,40177,40213,40693,40813,41017,41221,41281,41413,41617,41893,42061,42337,42373,42793,42961,43117,43177,43201,43321,43573,43597,43633,43717,44053,44101,44221,44257,44293,44893,45061,45337,45433,45481,45553,45613,45841,46021,46141,46261,46861,46993,47017,47161,47353,47521,47533,47653,47713,47737,47797,47857,48121,48193,48337,48673,48757,48781,49033,49261,49393,49417,49597,49681,49957,50221,50341,50377,50821,50893,51157,51217,51241,51481,51517,51637,52057,52081,52237,52321,52453,52501,52813,52861,52957,53077,53113,53281,53401,53917,54121,54133,54181,54217,54421,54517,54541,54673,54721,54973,55057,55381,55501,55633,55837,55921,55933,56053,56101,56113,56197,56401,56437,56701,56773,56821,56857,56893,57073,57097,57193,57241,57373,57457,57853,58153,58417,58441,58537,58573,58693,59053,59197,59221,59281,59341,59833,60217,60337,60373,60637,60733,60937,61057,61153,61261,61297,61561,61657,61681,61717,61861,62137,62473,62497,62533,62653,62773,63313,63397,63541,63697,63781,63913,64153,64237,64381,64513,64717,65173,65293,65413,65437,65497,65557,65677,65881,66301,66361,66601,66697,66853,66973,67057,67153,67273,67477,67537,67741,67777,67933,67993,68113,68281,68521,68737,69001,69073,69457,69493,69697,69877,70117,70177,70297,70501,70621,70921,70981,71233,71341,71353,71593,71821,72073,72481,72613,72901,72937,73141,73417,73477,73561,73693,74077,74317,74377,74713,75013,75133,75181,75721,75793,75913,76333,76561,76597,76753,77137,77641,78157,78193,78277,78877,78901,79333,79357,79537,79657,79693,79801,79873,80077,80173,80221,80473,80701,80713,80917,81013,81181,81517,81637,81853,82021,82153,82261,82561,82981,83077,83221,83233,83437,83617,83701,83773,84121,84313,84673,84697,84793,84913,85297,85333,85453,85717,85933,86353,86413,87181,87253,87337,87421,87433,87517,87553,87973,88117,88177,88237,88261,88513,88741,88897,88993,89293,89833,89917,90121,91081,91381,91393,91513,91957,92041,92557,92761,92821,92893,92941,93097,93133,93493,93637,93913,94033,94117,94273,94321,94441,94573,94777,94837,94993,95257,95317,95401,95581,95617,95713,95737,96097,96157,96181,96493,96517,96973,97081,97177,97501,97561,97777,97813,98017,98737,98953,99277,99577,99661,99877,100153,100237,100621,101161,101173,101197,101293,101341,101533,101641,101977,102001,102061,102121,102217,102301,102337,102397,102433,102481,102841,102877,103357,103573,103657,103813,103981,104053,104113,104161,104473,104773,105253,105277,105613,105673,105913,105997,106033,106297,106321,106537,106753,106801,106957,107053,107101,107137,107581,107713,107761,107773,108301,108553,108637,109201,109357,109441,109453,109597,109897,110017,110233,110437,110581,110821,110881,111217,111637,111697,111973,112261,112297,112621,113017,113341,113557,114073,114193,114277,114601,114661,114913,114973,115057,115117,115201,115561,115657,115693,115981,116113,116257,116293,116341,116461,116833,116881,116953,117133,117373,117541,117577,117841,118057,118213,118297,118681,118717,119233,119557,119617,119773,120181,120277,120577,120661,121321,121357,121453,121621,121921,122053,122761,122833,123121,123217,123373,123433,123457,123637,123757,123817,123853,123973,124021,124693,125737,125941,126397,126421,126481,126493,126733,126781,127081,127297,127453,127597,127681,128341,128377,128461,128473,128761,129757,129841,129853,129901,129937,130021,130057,130201,130477,130513,130873,130957,131041,131101,131113,131293,131413,131437,131617,131701,131797,132541,132721,133201,134257,134437,134677,134857,135301,135601,135613,135637,135781,135913,136417,136453,136621,136657,136777,136897,137077,138493,138517,139393,139753,139861,139981,140197,140221,140281,140401,140473,140593,140617,140761,140977,141073,141241,141277,141697,141937,141961,142237,142381,142573,142657,142837,142873,143053,143137,143413,143617,143797,143833,143881,144037,144061,144541,144757,144961,145477,145633,145777,145861,145897,146077,146581,146617,146701,146833,146917,146941,146953,147397,147541,147793,147997,148153,148201,148513,148573,148633,149053,149101,149173,149521,149713,150217,151141,151153,151237,151357,151561,151573,152077,152197,152293,152461,152941,153073,154057,154081,154333,154753,154981,155017,155137,155317,155377,155461,155521,155593,155797,156061,156157,156241,156601,156733,157081,157141,157393,157561,157837,158077,158293,158617,159073,159097,159157,159337,159553,159721,160141,160441,160681,160813,160981,161053,161221,161341,161521,161977,163117,163633,163861,164341,164377,164413,164677,164701,165133,165181,165313,165397,165457,165673,165877,165961,166273,166597,166861,167113,167437,167521,168253,168457,168697,168781,168913,169177,169501,169837,169933,169957,170293,170473,170761,170857,171253,171637,171673,172021,172153,172321,172357,172573,172681,172741,172933,172981,173713,173917,174241,174673,175081,175261,175393,175621,175753,176353,176521,176641,176677,177217,177301,177481,177493,177601,178141,178417,178537,178897,179041,179317,179533,179593,179833,179917,179953,180001,180241,180541,180793,181693,181813,182473,182593,182617,182773,182821,183877,184081,184153,184441,184633,184693,184753,184837,184957,185137,185161,185533,185557,185641,185797,185917,186301,186397,186481,187273,187477,187573,187897,188017,188197,188401,188437,188653,188701,188953,189061,189493,189697,189901,189997,190261,190573,190633,190837,190921,191137,191161,191413,191461,191473,191833,191977,192193,193201,193393,193513,193573,193597,193813,193861,193957,193993,194353,194653,194917,195121,195157,195457,195541,195697,195973,196033,196081,196201,196453,196501,196597,196837,197773,197893,198277,198553,198733,198817,198937,199153,199321,199357,199417,199657,199741,199753,199813,199921,200257,200713,201037,201073,201337,201493,201961,201973,201997,202393,202441,202693,202717,202753,202933,203221,203857,203953,204361,204397,204481,204517,204601,204733,204793,205213,205357,205537,205657,206197,206281,206341,206461,207121,207301,207673,208213,209317,209353,209401,209701,209821,209917,210037,210193,210421,211213,211297,211333,211501,211657,211741,211933,212437,212557,212593,212881,213181,213253,213337,213361,213397,213721,214141,214177,214237,215161,215197,215521,215653,216157,216217,216373,216421,216493,216577,216757,216841,216877,217033,217057,217081,217933,217981,218401,218641,218941,219133,219217,219277,219433,219577,219613,220537,220861,220873,221173,221281,221461,221497,221797,221953,222601,222877,223273,223441,223837,224221,224473,224677,225241,225373,225613,226453,226657,226741,227113,227497,227593,227797,227893,227977,228061,228457,228517,228637,228901,229093,229153,229321,229561,229693,229717,229777,230233,230653,230941,231481,231613,231661,231961,232081,232333,232381,232513,232681,232741,233437,233917,234217,234613,234721,235057,235441,235513,235621,236293,236377,236737,236773,237361,237373,237781,238093,238201,238213,238261,238837,239137,239233,239737,239857,240853,241321,241441,241873,241993,242161,242377,242533,242617,242713,243157,243421,243577,244021,244261,244297,244333,244597,244897,245437,245521,245653,245941,246097,246241,246577,246613,246793,246913,247201,247633,247957,247993,248041,248293,248461,248593,248701,248893,249133,249397,249433,249517,249541,249973,250057,250441,250741,250813,250993,251233,251473,251857,251917,252001,252037,252157,252193,252253,252457,252481,252541,252913,253081,253381,253501,253717,254161,254377,254413,254437,254593,255097,255181,255193,255217,255313,255361,255613,255637,255733,255841,256093,256441,256873,257017,257353,257497,257713,258241,258253,258337,258373,258721,259033,259177,259213,259537,259681,259801,259837,259933,260137,260893,261061,261241,261301,261973,262501,262621,262741,262897,262957,263401,263677,263881,264301,264997,265021,265093,265261,265273,265333,265417,265513,265717,265921,266137,266401,266521,266641,266701,267037,267193,267433,267601,267661,267961,268153,268537,268573,269413,269461,269701,269713,270037,270097,270421,270553,270601,270937,271021,271177,271273,271393,271573,271597,271657,272053,272353,273001,273061,273073,273313,273697,273901,273997,274177,274237,275581,275881,276277,276637,276673,276901,277021,277273,277597,277657,278041,278353,278581,278617,278917,279001,279073,280537,280561,280837,280897,281053,281233,281317,281353,281557,281653,281737,281857,282157,282241,282313,282481,283741,283813,283861,283873,284377,284593,284737,285421,285517,285673,285937,286393,286477,286513,286801,287137,287233,287257,287437,287557,288061,288481,288493,288577,288697,288817,288853,288877,289021,289417,289657,290041,290137,290533,290761,291373,291721,292021,292381,292393,292441,292477,292693,292717,292777,294277,294781,294793,295033,295081,295417,295837,295873,295993,296041,296557,296773,296797,296941,297061,297097,297421,297841,297853,298021,298153,298201,298237,298477,298513,298681,298993,299653,299941,300193,300301,300493,300757,300877,301141,301177,301813,301933,302053,302857,302941,303013,303073,303097,303157,303217,303361,303817,303937,304033,304081,304153,304393,304477,304813,305281,305533,305581,305917,306133,306301,306517,306541,306853,306913,307633,308317,308641,308701,308773,309157,309241,309493,309577,309853,310237,310273,310333,310501,310741,311041,311137,311197,311341,312121,312217,312253,312313,312517,312841,313153,313381,313561,313597,313933,314113,314161,314581,314641,314953,315037,315493,316033,316153,316321,316453,316681,316717,318313,318337,318841,319441,319477,320317,320401,320713,321301,321577,321721,321757,321961,322093,322921,323053,323137,324217,324781,324901,324997,325153,325201,325453,325477,325693,325777,325813,325993,326257,326497,326617,326701,327133,327721,327853,328177,328381,328753,328837,328897,329233,329401,329533,329617,329677,329761,330097,330661,330697,330793,331081,331333,331753,331801,331921,332053,332161,332473,333253,333337,333721,333973,334093,334297,334393,334681,334897,335221,335281,335557,335821,335833,335941,336253,336901,336961,336997,337081,337201,337261,337537,337873,338017,338137,338497,339673,339817,340057,340201,340393,340453,340477,340693,340777,341017,341281,341293,341521,341617,341701,341773,342337,343081,343141,343393,344017,344053,344293,344797,344821,345193,345517,345601,345733,345937,345997,346117,346417,347197,347233,347257,347317,347341,348097,348181,348241,348661,348937,349357,349717,349753,349801,349813,349981,350137,350257,350281,350521,350617,351037,351397,351517,352081,352357,352381,352441,352633,352837,353557,353797,354037,354181,354253,354421,354961,354973,355573,355777,355933,356077,356137,356701,356893,356977,357073,357241,357613,357661,357793,357817,358213,358417,358573,358993,359377,359641,360193,360421,360781,361093,361357,362161,362281,363217,363277,363577,364213,364333,364417,365017,365173,365557,365641,365773,365797,366133,366181,366517,366697,366721,366901,366973,366997,367021,367273,367321,367957,368077,368233,368737,368833,368881,369133,369253,369301,369553,369661,369673,369913,369997,370261,370441,370597,370801,371281,371353,371737,371941,372013,372037,372313,372901,373297,373357,373453,373717,373753,373777,374137,374677,374953,375373,375841,375901,376021,376393,376633,376801,377353,377557,377581,377653,377737,378253,378277,379033,379513,379597,379633,379993,380641,380713,381181,381673,381817,381841,382933,383101,383797,383821,384193,385057,385141,385261,385393,385597,385621,385897,386017,386401,386521,386713,387577,387721,387781,387913,388237,388477,389041,389161,389533,389797,389953,390097,390553,391021,391393,391861,392101,392221,392233,392857,393097,393121,393157,393361,393373,393541,393853,394153,394201,394717,394837,395137,395293,395377,395533,396061,396181,396217,396601,396937,397057,397633,398077,398821,398833,398857,398977,399241,399481,399613,400033,400261,400381,400657,400681,401173,401341,401593,402277,402613,403537,403957,403993,404197,404461,404713,404773,404941,405037,405241,405253,405277,405553,405997,406633,406837,407137,407233,407317,407521,407713,407821,407893,407977,408637,409021,409033,409333,409861,410257,410281,410341,410401,410833,410953,411013,411253,412561,413053,413557,413653,414157,414241,414277,414397,414913,415861,415993,416257,416281,416413,416881,417037,417181,417217,417457,418177,418357,418597,418633,418861,418993,419161,419317,419401,419701,419953,420037,420073,420193,420253,420313,420457,420481,420781,420997,421417,421621,421801,422077,422101,422353,422581,422881,423001,423013,423277,423481,423601,423781,423853,424261,425653,425701,426193,426637,426697,427597,427717,428041,428137,428173,428353,428473,428797,429277,429661,429733,429973,430357,430393,430921,431173,431377,431533,431797,432073,432121,432433,432577,432637,432793,432961,433141,433357,433501,433513,433681,433981,434113,434221,434437,434821,434857,434977,435037,435541,435817,436273,436741,436801,436957,437473,437497,437677,437881,437977,438001,438601,438721,439357,439441,439573,439693,439861,440281,440581,440653,440821,440893,440941,441073,441157,441361,441613,441877,442201,442501,442633,443017,443077,443161,443341,443353,443413,443437,443881,444253,445021,445573,445597,446197,446881,447841,447877,448093,448141,448597,448633,448801,449353,449473,449821,450217,450481,450913,450997,451057,451201,451441,451657,451837,451897,451921,452377,452401,452533,453217,453553,453637,454021,454501,454513,455341,455437,455737,455953,455977,456193,456613,456901,457021,457117,457153,457201,458053,458377,458533,458701,458797,458917,459013,459037,459181,459397,459421,459961,460297,460477,460561,460777,461101,461437,461521,461653,461917,462337,462481,462541,462577,462697,462733,463093,463213,463261,463321,463717,463741,463753,463921,464257,464413,464917,465133,465337,465721,465781,466321,466441,467017,467101,467197,467833,467881,468133,468241,468277,468421,468661,468913,469141,469561,469957,470317,470461,470881,471073,471241,471697,471781,471853,471901,472333,472573,472921,473497,473761,473833,474037,474433,474541,474757,475093,475141,475381,475753,475933,476317,476401,476737,477277,477313,477361,477517,477577,478273,478573,478861,479041,479221,479377,479461,479473,479701,479953,480013,480517,480541,481141,481177,481681,482101,482233,482281,482413,482641,483541,483733,484117,484201,485041,485101,485593,485941,485977,486061,486181,486313,486601,486781,487177,487261,487561,487657,487741,488317,488353,488701,488797,488821,489133,489337,489493,489673,489793,489913,490057,490417,490537,490837,491041,491341,491797,491977,492721,492781,493021,493573,493621,493777,493813,493873,494281,494497,494617,494677,494737,494761,495037,495181,495301,495421,495433,495457,495757,495877,496333,496813,497017,497137,497281,497473,497557,497677,497701,497737,497773,498073,498361,498397,498733,499033,499621,499717};
    map<int,int> num;
    rep(i,0,likeNum.size()){
        num[likeNum[i]] = i;
    }


    int q;
    cin >> q;
    while(q--){
        int l,r;
        cin >> l >> r;
        if(r<3){
            cout << "0" << nl;
            continue;
        }
        auto itrL = lower_bound(all(likeNum),l);
        auto itrR = lower_bound(all(likeNum),r);
        if(itrL==likeNum.end()){
            cout << 0 << nl;
        }
        else{
            if(*itrR == r){
                cout << itrR-itrL+1 << nl;
            }
            else{
                cout << itrR-itrL << nl;
            }
        }
    }
}